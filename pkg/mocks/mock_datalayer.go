// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dollarshaveclub/acyl/pkg/persistence (interfaces: DataLayer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/dollarshaveclub/acyl/pkg/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
	time "time"
)

// MockDataLayer is a mock of DataLayer interface
type MockDataLayer struct {
	ctrl     *gomock.Controller
	recorder *MockDataLayerMockRecorder
}

// MockDataLayerMockRecorder is the mock recorder for MockDataLayer
type MockDataLayerMockRecorder struct {
	mock *MockDataLayer
}

// NewMockDataLayer creates a new mock instance
func NewMockDataLayer(ctrl *gomock.Controller) *MockDataLayer {
	mock := &MockDataLayer{ctrl: ctrl}
	mock.recorder = &MockDataLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataLayer) EXPECT() *MockDataLayerMockRecorder {
	return m.recorder
}

// AddEvent mocks base method
func (m *MockDataLayer) AddEvent(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvent indicates an expected call of AddEvent
func (mr *MockDataLayerMockRecorder) AddEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockDataLayer)(nil).AddEvent), arg0, arg1, arg2)
}

// AppendToEventLog mocks base method
func (m *MockDataLayer) AppendToEventLog(arg0 uuid.UUID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendToEventLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendToEventLog indicates an expected call of AppendToEventLog
func (mr *MockDataLayerMockRecorder) AppendToEventLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendToEventLog", reflect.TypeOf((*MockDataLayer)(nil).AppendToEventLog), arg0, arg1)
}

// Close mocks base method
func (m *MockDataLayer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDataLayerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataLayer)(nil).Close))
}

// CreateEventLog mocks base method
func (m *MockDataLayer) CreateEventLog(arg0 *models.EventLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventLog indicates an expected call of CreateEventLog
func (mr *MockDataLayerMockRecorder) CreateEventLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventLog", reflect.TypeOf((*MockDataLayer)(nil).CreateEventLog), arg0)
}

// CreateHelmReleasesForEnv mocks base method
func (m *MockDataLayer) CreateHelmReleasesForEnv(arg0 context.Context, arg1 []models.HelmRelease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHelmReleasesForEnv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHelmReleasesForEnv indicates an expected call of CreateHelmReleasesForEnv
func (mr *MockDataLayerMockRecorder) CreateHelmReleasesForEnv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHelmReleasesForEnv", reflect.TypeOf((*MockDataLayer)(nil).CreateHelmReleasesForEnv), arg0, arg1)
}

// CreateK8sEnv mocks base method
func (m *MockDataLayer) CreateK8sEnv(arg0 context.Context, arg1 *models.KubernetesEnvironment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateK8sEnv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateK8sEnv indicates an expected call of CreateK8sEnv
func (mr *MockDataLayerMockRecorder) CreateK8sEnv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateK8sEnv", reflect.TypeOf((*MockDataLayer)(nil).CreateK8sEnv), arg0, arg1)
}

// CreateQAEnvironment mocks base method
func (m *MockDataLayer) CreateQAEnvironment(arg0 context.Context, arg1 *models.QAEnvironment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQAEnvironment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQAEnvironment indicates an expected call of CreateQAEnvironment
func (mr *MockDataLayerMockRecorder) CreateQAEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQAEnvironment", reflect.TypeOf((*MockDataLayer)(nil).CreateQAEnvironment), arg0, arg1)
}

// DeleteEventLog mocks base method
func (m *MockDataLayer) DeleteEventLog(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventLog indicates an expected call of DeleteEventLog
func (mr *MockDataLayerMockRecorder) DeleteEventLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventLog", reflect.TypeOf((*MockDataLayer)(nil).DeleteEventLog), arg0)
}

// DeleteEventLogsByEnvName mocks base method
func (m *MockDataLayer) DeleteEventLogsByEnvName(arg0 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventLogsByEnvName", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventLogsByEnvName indicates an expected call of DeleteEventLogsByEnvName
func (mr *MockDataLayerMockRecorder) DeleteEventLogsByEnvName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventLogsByEnvName", reflect.TypeOf((*MockDataLayer)(nil).DeleteEventLogsByEnvName), arg0)
}

// DeleteEventLogsByRepoAndPR mocks base method
func (m *MockDataLayer) DeleteEventLogsByRepoAndPR(arg0 string, arg1 uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventLogsByRepoAndPR", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventLogsByRepoAndPR indicates an expected call of DeleteEventLogsByRepoAndPR
func (mr *MockDataLayerMockRecorder) DeleteEventLogsByRepoAndPR(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventLogsByRepoAndPR", reflect.TypeOf((*MockDataLayer)(nil).DeleteEventLogsByRepoAndPR), arg0, arg1)
}

// DeleteHelmReleasesForEnv mocks base method
func (m *MockDataLayer) DeleteHelmReleasesForEnv(arg0 context.Context, arg1 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHelmReleasesForEnv", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHelmReleasesForEnv indicates an expected call of DeleteHelmReleasesForEnv
func (mr *MockDataLayerMockRecorder) DeleteHelmReleasesForEnv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHelmReleasesForEnv", reflect.TypeOf((*MockDataLayer)(nil).DeleteHelmReleasesForEnv), arg0, arg1)
}

// DeleteK8sEnv mocks base method
func (m *MockDataLayer) DeleteK8sEnv(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteK8sEnv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteK8sEnv indicates an expected call of DeleteK8sEnv
func (mr *MockDataLayerMockRecorder) DeleteK8sEnv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteK8sEnv", reflect.TypeOf((*MockDataLayer)(nil).DeleteK8sEnv), arg0, arg1)
}

// DeleteQAEnvironment mocks base method
func (m *MockDataLayer) DeleteQAEnvironment(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQAEnvironment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQAEnvironment indicates an expected call of DeleteQAEnvironment
func (mr *MockDataLayerMockRecorder) DeleteQAEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQAEnvironment", reflect.TypeOf((*MockDataLayer)(nil).DeleteQAEnvironment), arg0, arg1)
}

// GetEventLogByID mocks base method
func (m *MockDataLayer) GetEventLogByID(arg0 uuid.UUID) (*models.EventLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventLogByID", arg0)
	ret0, _ := ret[0].(*models.EventLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventLogByID indicates an expected call of GetEventLogByID
func (mr *MockDataLayerMockRecorder) GetEventLogByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventLogByID", reflect.TypeOf((*MockDataLayer)(nil).GetEventLogByID), arg0)
}

// GetEventLogsByEnvName mocks base method
func (m *MockDataLayer) GetEventLogsByEnvName(arg0 string) ([]models.EventLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventLogsByEnvName", arg0)
	ret0, _ := ret[0].([]models.EventLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventLogsByEnvName indicates an expected call of GetEventLogsByEnvName
func (mr *MockDataLayerMockRecorder) GetEventLogsByEnvName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventLogsByEnvName", reflect.TypeOf((*MockDataLayer)(nil).GetEventLogsByEnvName), arg0)
}

// GetEventLogsByRepoAndPR mocks base method
func (m *MockDataLayer) GetEventLogsByRepoAndPR(arg0 string, arg1 uint) ([]models.EventLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventLogsByRepoAndPR", arg0, arg1)
	ret0, _ := ret[0].([]models.EventLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventLogsByRepoAndPR indicates an expected call of GetEventLogsByRepoAndPR
func (mr *MockDataLayerMockRecorder) GetEventLogsByRepoAndPR(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventLogsByRepoAndPR", reflect.TypeOf((*MockDataLayer)(nil).GetEventLogsByRepoAndPR), arg0, arg1)
}

// GetEventStatus mocks base method
func (m *MockDataLayer) GetEventStatus(arg0 uuid.UUID) (*models.EventStatusSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventStatus", arg0)
	ret0, _ := ret[0].(*models.EventStatusSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventStatus indicates an expected call of GetEventStatus
func (mr *MockDataLayerMockRecorder) GetEventStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventStatus", reflect.TypeOf((*MockDataLayer)(nil).GetEventStatus), arg0)
}

// GetExtantQAEnvironments mocks base method
func (m *MockDataLayer) GetExtantQAEnvironments(arg0 context.Context, arg1 string, arg2 uint) ([]models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtantQAEnvironments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtantQAEnvironments indicates an expected call of GetExtantQAEnvironments
func (mr *MockDataLayerMockRecorder) GetExtantQAEnvironments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtantQAEnvironments", reflect.TypeOf((*MockDataLayer)(nil).GetExtantQAEnvironments), arg0, arg1, arg2)
}

// GetHelmReleasesForEnv mocks base method
func (m *MockDataLayer) GetHelmReleasesForEnv(arg0 context.Context, arg1 string) ([]models.HelmRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelmReleasesForEnv", arg0, arg1)
	ret0, _ := ret[0].([]models.HelmRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelmReleasesForEnv indicates an expected call of GetHelmReleasesForEnv
func (mr *MockDataLayerMockRecorder) GetHelmReleasesForEnv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelmReleasesForEnv", reflect.TypeOf((*MockDataLayer)(nil).GetHelmReleasesForEnv), arg0, arg1)
}

// GetK8sEnv mocks base method
func (m *MockDataLayer) GetK8sEnv(arg0 context.Context, arg1 string) (*models.KubernetesEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetK8sEnv", arg0, arg1)
	ret0, _ := ret[0].(*models.KubernetesEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetK8sEnv indicates an expected call of GetK8sEnv
func (mr *MockDataLayerMockRecorder) GetK8sEnv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetK8sEnv", reflect.TypeOf((*MockDataLayer)(nil).GetK8sEnv), arg0, arg1)
}

// GetK8sEnvsByNamespace mocks base method
func (m *MockDataLayer) GetK8sEnvsByNamespace(arg0 context.Context, arg1 string) ([]models.KubernetesEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetK8sEnvsByNamespace", arg0, arg1)
	ret0, _ := ret[0].([]models.KubernetesEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetK8sEnvsByNamespace indicates an expected call of GetK8sEnvsByNamespace
func (mr *MockDataLayerMockRecorder) GetK8sEnvsByNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetK8sEnvsByNamespace", reflect.TypeOf((*MockDataLayer)(nil).GetK8sEnvsByNamespace), arg0, arg1)
}

// GetMostRecent mocks base method
func (m *MockDataLayer) GetMostRecent(arg0 context.Context, arg1 uint) ([]models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostRecent", arg0, arg1)
	ret0, _ := ret[0].([]models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostRecent indicates an expected call of GetMostRecent
func (mr *MockDataLayerMockRecorder) GetMostRecent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRecent", reflect.TypeOf((*MockDataLayer)(nil).GetMostRecent), arg0, arg1)
}

// GetQAEnvironment mocks base method
func (m *MockDataLayer) GetQAEnvironment(arg0 context.Context, arg1 string) (*models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAEnvironment indicates an expected call of GetQAEnvironment
func (mr *MockDataLayerMockRecorder) GetQAEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAEnvironment", reflect.TypeOf((*MockDataLayer)(nil).GetQAEnvironment), arg0, arg1)
}

// GetQAEnvironmentBySourceSHA mocks base method
func (m *MockDataLayer) GetQAEnvironmentBySourceSHA(arg0 context.Context, arg1 string) (*models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAEnvironmentBySourceSHA", arg0, arg1)
	ret0, _ := ret[0].(*models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAEnvironmentBySourceSHA indicates an expected call of GetQAEnvironmentBySourceSHA
func (mr *MockDataLayerMockRecorder) GetQAEnvironmentBySourceSHA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAEnvironmentBySourceSHA", reflect.TypeOf((*MockDataLayer)(nil).GetQAEnvironmentBySourceSHA), arg0, arg1)
}

// GetQAEnvironmentConsistently mocks base method
func (m *MockDataLayer) GetQAEnvironmentConsistently(arg0 context.Context, arg1 string) (*models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAEnvironmentConsistently", arg0, arg1)
	ret0, _ := ret[0].(*models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAEnvironmentConsistently indicates an expected call of GetQAEnvironmentConsistently
func (mr *MockDataLayerMockRecorder) GetQAEnvironmentConsistently(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAEnvironmentConsistently", reflect.TypeOf((*MockDataLayer)(nil).GetQAEnvironmentConsistently), arg0, arg1)
}

// GetQAEnvironments mocks base method
func (m *MockDataLayer) GetQAEnvironments(arg0 context.Context) ([]models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAEnvironments", arg0)
	ret0, _ := ret[0].([]models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAEnvironments indicates an expected call of GetQAEnvironments
func (mr *MockDataLayerMockRecorder) GetQAEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAEnvironments", reflect.TypeOf((*MockDataLayer)(nil).GetQAEnvironments), arg0)
}

// GetQAEnvironmentsByRepo mocks base method
func (m *MockDataLayer) GetQAEnvironmentsByRepo(arg0 context.Context, arg1 string) ([]models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAEnvironmentsByRepo", arg0, arg1)
	ret0, _ := ret[0].([]models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAEnvironmentsByRepo indicates an expected call of GetQAEnvironmentsByRepo
func (mr *MockDataLayerMockRecorder) GetQAEnvironmentsByRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAEnvironmentsByRepo", reflect.TypeOf((*MockDataLayer)(nil).GetQAEnvironmentsByRepo), arg0, arg1)
}

// GetQAEnvironmentsByRepoAndPR mocks base method
func (m *MockDataLayer) GetQAEnvironmentsByRepoAndPR(arg0 context.Context, arg1 string, arg2 uint) ([]models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAEnvironmentsByRepoAndPR", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAEnvironmentsByRepoAndPR indicates an expected call of GetQAEnvironmentsByRepoAndPR
func (mr *MockDataLayerMockRecorder) GetQAEnvironmentsByRepoAndPR(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAEnvironmentsByRepoAndPR", reflect.TypeOf((*MockDataLayer)(nil).GetQAEnvironmentsByRepoAndPR), arg0, arg1, arg2)
}

// GetQAEnvironmentsBySourceBranch mocks base method
func (m *MockDataLayer) GetQAEnvironmentsBySourceBranch(arg0 context.Context, arg1 string) ([]models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAEnvironmentsBySourceBranch", arg0, arg1)
	ret0, _ := ret[0].([]models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAEnvironmentsBySourceBranch indicates an expected call of GetQAEnvironmentsBySourceBranch
func (mr *MockDataLayerMockRecorder) GetQAEnvironmentsBySourceBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAEnvironmentsBySourceBranch", reflect.TypeOf((*MockDataLayer)(nil).GetQAEnvironmentsBySourceBranch), arg0, arg1)
}

// GetQAEnvironmentsByStatus mocks base method
func (m *MockDataLayer) GetQAEnvironmentsByStatus(arg0 context.Context, arg1 string) ([]models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAEnvironmentsByStatus", arg0, arg1)
	ret0, _ := ret[0].([]models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAEnvironmentsByStatus indicates an expected call of GetQAEnvironmentsByStatus
func (mr *MockDataLayerMockRecorder) GetQAEnvironmentsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAEnvironmentsByStatus", reflect.TypeOf((*MockDataLayer)(nil).GetQAEnvironmentsByStatus), arg0, arg1)
}

// GetQAEnvironmentsByUser mocks base method
func (m *MockDataLayer) GetQAEnvironmentsByUser(arg0 context.Context, arg1 string) ([]models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAEnvironmentsByUser", arg0, arg1)
	ret0, _ := ret[0].([]models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAEnvironmentsByUser indicates an expected call of GetQAEnvironmentsByUser
func (mr *MockDataLayerMockRecorder) GetQAEnvironmentsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAEnvironmentsByUser", reflect.TypeOf((*MockDataLayer)(nil).GetQAEnvironmentsByUser), arg0, arg1)
}

// GetRunningQAEnvironments mocks base method
func (m *MockDataLayer) GetRunningQAEnvironments(arg0 context.Context) ([]models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunningQAEnvironments", arg0)
	ret0, _ := ret[0].([]models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunningQAEnvironments indicates an expected call of GetRunningQAEnvironments
func (mr *MockDataLayerMockRecorder) GetRunningQAEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunningQAEnvironments", reflect.TypeOf((*MockDataLayer)(nil).GetRunningQAEnvironments), arg0)
}

// Search mocks base method
func (m *MockDataLayer) Search(arg0 context.Context, arg1 models.EnvSearchParameters) ([]models.QAEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].([]models.QAEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockDataLayerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataLayer)(nil).Search), arg0, arg1)
}

// SetAminoEnvironmentID mocks base method
func (m *MockDataLayer) SetAminoEnvironmentID(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAminoEnvironmentID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAminoEnvironmentID indicates an expected call of SetAminoEnvironmentID
func (mr *MockDataLayerMockRecorder) SetAminoEnvironmentID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAminoEnvironmentID", reflect.TypeOf((*MockDataLayer)(nil).SetAminoEnvironmentID), arg0, arg1, arg2)
}

// SetAminoKubernetesNamespace mocks base method
func (m *MockDataLayer) SetAminoKubernetesNamespace(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAminoKubernetesNamespace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAminoKubernetesNamespace indicates an expected call of SetAminoKubernetesNamespace
func (mr *MockDataLayerMockRecorder) SetAminoKubernetesNamespace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAminoKubernetesNamespace", reflect.TypeOf((*MockDataLayer)(nil).SetAminoKubernetesNamespace), arg0, arg1, arg2)
}

// SetAminoServiceToPort mocks base method
func (m *MockDataLayer) SetAminoServiceToPort(arg0 context.Context, arg1 string, arg2 map[string]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAminoServiceToPort", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAminoServiceToPort indicates an expected call of SetAminoServiceToPort
func (mr *MockDataLayerMockRecorder) SetAminoServiceToPort(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAminoServiceToPort", reflect.TypeOf((*MockDataLayer)(nil).SetAminoServiceToPort), arg0, arg1, arg2)
}

// SetEventLogEnvName mocks base method
func (m *MockDataLayer) SetEventLogEnvName(arg0 uuid.UUID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventLogEnvName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventLogEnvName indicates an expected call of SetEventLogEnvName
func (mr *MockDataLayerMockRecorder) SetEventLogEnvName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventLogEnvName", reflect.TypeOf((*MockDataLayer)(nil).SetEventLogEnvName), arg0, arg1)
}

// SetEventStatus mocks base method
func (m *MockDataLayer) SetEventStatus(arg0 uuid.UUID, arg1 models.EventStatusSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventStatus indicates an expected call of SetEventStatus
func (mr *MockDataLayerMockRecorder) SetEventStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStatus", reflect.TypeOf((*MockDataLayer)(nil).SetEventStatus), arg0, arg1)
}

// SetEventStatusChartCompleted mocks base method
func (m *MockDataLayer) SetEventStatusChartCompleted(arg0 uuid.UUID, arg1 string, arg2 models.NodeChartStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventStatusChartCompleted", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventStatusChartCompleted indicates an expected call of SetEventStatusChartCompleted
func (mr *MockDataLayerMockRecorder) SetEventStatusChartCompleted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStatusChartCompleted", reflect.TypeOf((*MockDataLayer)(nil).SetEventStatusChartCompleted), arg0, arg1, arg2)
}

// SetEventStatusChartStarted mocks base method
func (m *MockDataLayer) SetEventStatusChartStarted(arg0 uuid.UUID, arg1 string, arg2 models.NodeChartStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventStatusChartStarted", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventStatusChartStarted indicates an expected call of SetEventStatusChartStarted
func (mr *MockDataLayerMockRecorder) SetEventStatusChartStarted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStatusChartStarted", reflect.TypeOf((*MockDataLayer)(nil).SetEventStatusChartStarted), arg0, arg1, arg2)
}

// SetEventStatusCompleted mocks base method
func (m *MockDataLayer) SetEventStatusCompleted(arg0 uuid.UUID, arg1 models.EventStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventStatusCompleted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventStatusCompleted indicates an expected call of SetEventStatusCompleted
func (mr *MockDataLayerMockRecorder) SetEventStatusCompleted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStatusCompleted", reflect.TypeOf((*MockDataLayer)(nil).SetEventStatusCompleted), arg0, arg1)
}

// SetEventStatusConfig mocks base method
func (m *MockDataLayer) SetEventStatusConfig(arg0 uuid.UUID, arg1 time.Duration, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventStatusConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventStatusConfig indicates an expected call of SetEventStatusConfig
func (mr *MockDataLayerMockRecorder) SetEventStatusConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStatusConfig", reflect.TypeOf((*MockDataLayer)(nil).SetEventStatusConfig), arg0, arg1, arg2)
}

// SetEventStatusImageCompleted mocks base method
func (m *MockDataLayer) SetEventStatusImageCompleted(arg0 uuid.UUID, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventStatusImageCompleted", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventStatusImageCompleted indicates an expected call of SetEventStatusImageCompleted
func (mr *MockDataLayerMockRecorder) SetEventStatusImageCompleted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStatusImageCompleted", reflect.TypeOf((*MockDataLayer)(nil).SetEventStatusImageCompleted), arg0, arg1, arg2)
}

// SetEventStatusImageStarted mocks base method
func (m *MockDataLayer) SetEventStatusImageStarted(arg0 uuid.UUID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventStatusImageStarted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventStatusImageStarted indicates an expected call of SetEventStatusImageStarted
func (mr *MockDataLayerMockRecorder) SetEventStatusImageStarted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStatusImageStarted", reflect.TypeOf((*MockDataLayer)(nil).SetEventStatusImageStarted), arg0, arg1)
}

// SetEventStatusTree mocks base method
func (m *MockDataLayer) SetEventStatusTree(arg0 uuid.UUID, arg1 map[string]models.EventStatusTreeNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventStatusTree", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventStatusTree indicates an expected call of SetEventStatusTree
func (mr *MockDataLayerMockRecorder) SetEventStatusTree(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStatusTree", reflect.TypeOf((*MockDataLayer)(nil).SetEventStatusTree), arg0, arg1)
}

// SetQAEnvironmentCommitSHAMap mocks base method
func (m *MockDataLayer) SetQAEnvironmentCommitSHAMap(arg0 context.Context, arg1 string, arg2 models.RefMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQAEnvironmentCommitSHAMap", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQAEnvironmentCommitSHAMap indicates an expected call of SetQAEnvironmentCommitSHAMap
func (mr *MockDataLayerMockRecorder) SetQAEnvironmentCommitSHAMap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQAEnvironmentCommitSHAMap", reflect.TypeOf((*MockDataLayer)(nil).SetQAEnvironmentCommitSHAMap), arg0, arg1, arg2)
}

// SetQAEnvironmentCreated mocks base method
func (m *MockDataLayer) SetQAEnvironmentCreated(arg0 context.Context, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQAEnvironmentCreated", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQAEnvironmentCreated indicates an expected call of SetQAEnvironmentCreated
func (mr *MockDataLayerMockRecorder) SetQAEnvironmentCreated(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQAEnvironmentCreated", reflect.TypeOf((*MockDataLayer)(nil).SetQAEnvironmentCreated), arg0, arg1, arg2)
}

// SetQAEnvironmentRefMap mocks base method
func (m *MockDataLayer) SetQAEnvironmentRefMap(arg0 context.Context, arg1 string, arg2 models.RefMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQAEnvironmentRefMap", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQAEnvironmentRefMap indicates an expected call of SetQAEnvironmentRefMap
func (mr *MockDataLayerMockRecorder) SetQAEnvironmentRefMap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQAEnvironmentRefMap", reflect.TypeOf((*MockDataLayer)(nil).SetQAEnvironmentRefMap), arg0, arg1, arg2)
}

// SetQAEnvironmentRepoData mocks base method
func (m *MockDataLayer) SetQAEnvironmentRepoData(arg0 context.Context, arg1 string, arg2 *models.RepoRevisionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQAEnvironmentRepoData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQAEnvironmentRepoData indicates an expected call of SetQAEnvironmentRepoData
func (mr *MockDataLayerMockRecorder) SetQAEnvironmentRepoData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQAEnvironmentRepoData", reflect.TypeOf((*MockDataLayer)(nil).SetQAEnvironmentRepoData), arg0, arg1, arg2)
}

// SetQAEnvironmentStatus mocks base method
func (m *MockDataLayer) SetQAEnvironmentStatus(arg0 context.Context, arg1 string, arg2 models.EnvironmentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQAEnvironmentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQAEnvironmentStatus indicates an expected call of SetQAEnvironmentStatus
func (mr *MockDataLayerMockRecorder) SetQAEnvironmentStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQAEnvironmentStatus", reflect.TypeOf((*MockDataLayer)(nil).SetQAEnvironmentStatus), arg0, arg1, arg2)
}

// UpdateHelmReleaseRevision mocks base method
func (m *MockDataLayer) UpdateHelmReleaseRevision(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHelmReleaseRevision", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHelmReleaseRevision indicates an expected call of UpdateHelmReleaseRevision
func (mr *MockDataLayerMockRecorder) UpdateHelmReleaseRevision(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHelmReleaseRevision", reflect.TypeOf((*MockDataLayer)(nil).UpdateHelmReleaseRevision), arg0, arg1, arg2, arg3)
}

// UpdateK8sEnvTillerAddr mocks base method
func (m *MockDataLayer) UpdateK8sEnvTillerAddr(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateK8sEnvTillerAddr", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateK8sEnvTillerAddr indicates an expected call of UpdateK8sEnvTillerAddr
func (mr *MockDataLayerMockRecorder) UpdateK8sEnvTillerAddr(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateK8sEnvTillerAddr", reflect.TypeOf((*MockDataLayer)(nil).UpdateK8sEnvTillerAddr), arg0, arg1, arg2)
}
