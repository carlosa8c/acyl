// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dollarshaveclub/acyl/pkg/ghclient (interfaces: RepoClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	ghclient "github.com/dollarshaveclub/acyl/pkg/ghclient"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepoClient is a mock of RepoClient interface
type MockRepoClient struct {
	ctrl     *gomock.Controller
	recorder *MockRepoClientMockRecorder
}

// MockRepoClientMockRecorder is the mock recorder for MockRepoClient
type MockRepoClientMockRecorder struct {
	mock *MockRepoClient
}

// NewMockRepoClient creates a new mock instance
func NewMockRepoClient(ctrl *gomock.Controller) *MockRepoClient {
	mock := &MockRepoClient{ctrl: ctrl}
	mock.recorder = &MockRepoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoClient) EXPECT() *MockRepoClientMockRecorder {
	return m.recorder
}

// GetBranch mocks base method
func (m *MockRepoClient) GetBranch(arg0 context.Context, arg1, arg2 string) (ghclient.BranchInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(ghclient.BranchInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch
func (mr *MockRepoClientMockRecorder) GetBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockRepoClient)(nil).GetBranch), arg0, arg1, arg2)
}

// GetBranches mocks base method
func (m *MockRepoClient) GetBranches(arg0 context.Context, arg1 string) ([]ghclient.BranchInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranches", arg0, arg1)
	ret0, _ := ret[0].([]ghclient.BranchInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranches indicates an expected call of GetBranches
func (mr *MockRepoClientMockRecorder) GetBranches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranches", reflect.TypeOf((*MockRepoClient)(nil).GetBranches), arg0, arg1)
}

// GetCommitMessage mocks base method
func (m *MockRepoClient) GetCommitMessage(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitMessage indicates an expected call of GetCommitMessage
func (mr *MockRepoClientMockRecorder) GetCommitMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitMessage", reflect.TypeOf((*MockRepoClient)(nil).GetCommitMessage), arg0, arg1, arg2)
}

// GetDirectoryContents mocks base method
func (m *MockRepoClient) GetDirectoryContents(arg0 context.Context, arg1, arg2, arg3 string) (map[string]ghclient.FileContents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectoryContents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]ghclient.FileContents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectoryContents indicates an expected call of GetDirectoryContents
func (mr *MockRepoClientMockRecorder) GetDirectoryContents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryContents", reflect.TypeOf((*MockRepoClient)(nil).GetDirectoryContents), arg0, arg1, arg2, arg3)
}

// GetFileContents mocks base method
func (m *MockRepoClient) GetFileContents(arg0 context.Context, arg1, arg2, arg3 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContents indicates an expected call of GetFileContents
func (mr *MockRepoClientMockRecorder) GetFileContents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContents", reflect.TypeOf((*MockRepoClient)(nil).GetFileContents), arg0, arg1, arg2, arg3)
}

// GetPRStatus mocks base method
func (m *MockRepoClient) GetPRStatus(arg0 context.Context, arg1 string, arg2 uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPRStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPRStatus indicates an expected call of GetPRStatus
func (mr *MockRepoClientMockRecorder) GetPRStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPRStatus", reflect.TypeOf((*MockRepoClient)(nil).GetPRStatus), arg0, arg1, arg2)
}

// GetTags mocks base method
func (m *MockRepoClient) GetTags(arg0 context.Context, arg1 string) ([]ghclient.BranchInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0, arg1)
	ret0, _ := ret[0].([]ghclient.BranchInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags
func (mr *MockRepoClientMockRecorder) GetTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockRepoClient)(nil).GetTags), arg0, arg1)
}

// SetStatus mocks base method
func (m *MockRepoClient) SetStatus(arg0 context.Context, arg1, arg2 string, arg3 *ghclient.CommitStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockRepoClientMockRecorder) SetStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockRepoClient)(nil).SetStatus), arg0, arg1, arg2, arg3)
}
