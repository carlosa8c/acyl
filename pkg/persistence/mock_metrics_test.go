// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/Pluto-tv/acyl/pkg/metrics (interfaces: Collector)

package persistence

import (
	time "time"

	models "github.com/Pluto-tv/acyl/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Collector interface
type MockCollector struct {
	ctrl     *gomock.Controller
	recorder *_MockCollectorRecorder
}

// Recorder for MockCollector (not exported)
type _MockCollectorRecorder struct {
	mock *MockCollector
}

func NewMockCollector(ctrl *gomock.Controller) *MockCollector {
	mock := &MockCollector{ctrl: ctrl}
	mock.recorder = &_MockCollectorRecorder{mock}
	return mock
}

func (_m *MockCollector) EXPECT() *_MockCollectorRecorder {
	return _m.recorder
}

func (_m *MockCollector) AminoDeployTimedOut(_param0 string, _param1 string, _param2 string) {
	_m.ctrl.Call(_m, "AminoDeployTimedOut", _param0, _param1, _param2)
}

func (_mr *_MockCollectorRecorder) AminoDeployTimedOut(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AminoDeployTimedOut", arg0, arg1, arg2)
}

func (_m *MockCollector) ContainerBuildAllDuration(_param0 string, _param1 string, _param2 string, _param3 time.Duration, _param4 error) {
	_m.ctrl.Call(_m, "ContainerBuildAllDuration", _param0, _param1, _param2, _param3, _param4)
}

func (_mr *_MockCollectorRecorder) ContainerBuildAllDuration(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerBuildAllDuration", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockCollector) ContainerBuildDuration(_param0 string, _param1 string, _param2 string, _param3 string, _param4 string, _param5 time.Duration, _param6 error) {
	_m.ctrl.Call(_m, "ContainerBuildDuration", _param0, _param1, _param2, _param3, _param4, _param5, _param6)
}

func (_mr *_MockCollectorRecorder) ContainerBuildDuration(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerBuildDuration", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockCollector) EnvironmentCount(_param0 string, _param1 models.EnvironmentStatus, _param2 uint) {
	_m.ctrl.Call(_m, "EnvironmentCount", _param0, _param1, _param2)
}

func (_mr *_MockCollectorRecorder) EnvironmentCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnvironmentCount", arg0, arg1, arg2)
}

func (_m *MockCollector) EventCountExceededDropped(_param0 string, _param1 string, _param2 string) {
	_m.ctrl.Call(_m, "EventCountExceededDropped", _param0, _param1, _param2)
}

func (_mr *_MockCollectorRecorder) EventCountExceededDropped(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EventCountExceededDropped", arg0, arg1, arg2)
}

func (_m *MockCollector) EventRateLimitDropped(_param0 string) {
	_m.ctrl.Call(_m, "EventRateLimitDropped", _param0)
}

func (_mr *_MockCollectorRecorder) EventRateLimitDropped(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EventRateLimitDropped", arg0)
}

func (_m *MockCollector) Failure(_param0 string, _param1 string, _param2 string) {
	_m.ctrl.Call(_m, "Failure", _param0, _param1, _param2)
}

func (_mr *_MockCollectorRecorder) Failure(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Failure", arg0, arg1, arg2)
}

func (_m *MockCollector) ImageBuildFailed(_param0 string, _param1 string, _param2 string) {
	_m.ctrl.Call(_m, "ImageBuildFailed", _param0, _param1, _param2)
}

func (_mr *_MockCollectorRecorder) ImageBuildFailed(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImageBuildFailed", arg0, arg1, arg2)
}

func (_m *MockCollector) Operation(_param0 string, _param1 string, _param2 string, _param3 string, _param4 error) {
	_m.ctrl.Call(_m, "Operation", _param0, _param1, _param2, _param3, _param4)
}

func (_mr *_MockCollectorRecorder) Operation(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Operation", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockCollector) ProvisioningDuration(_param0 string, _param1 string, _param2 string, _param3 time.Duration, _param4 error) {
	_m.ctrl.Call(_m, "ProvisioningDuration", _param0, _param1, _param2, _param3, _param4)
}

func (_mr *_MockCollectorRecorder) ProvisioningDuration(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProvisioningDuration", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockCollector) Pruned(_param0 int) {
	_m.ctrl.Call(_m, "Pruned", _param0)
}

func (_mr *_MockCollectorRecorder) Pruned(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pruned", arg0)
}

func (_m *MockCollector) Reaped(_param0 string, _param1 string, _param2 models.QADestroyReason, _param3 error) {
	_m.ctrl.Call(_m, "Reaped", _param0, _param1, _param2, _param3)
}

func (_mr *_MockCollectorRecorder) Reaped(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reaped", arg0, arg1, arg2, arg3)
}

func (_m *MockCollector) Success(_param0 string, _param1 string, _param2 string) {
	_m.ctrl.Call(_m, "Success", _param0, _param1, _param2)
}

func (_mr *_MockCollectorRecorder) Success(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Success", arg0, arg1, arg2)
}

func (_m *MockCollector) TimeContainerBuild(_param0 string, _param1 string, _param2 string, _param3 string, _param4 string, _param5 *error) func() {
	ret := _m.ctrl.Call(_m, "TimeContainerBuild", _param0, _param1, _param2, _param3, _param4, _param5)
	ret0, _ := ret[0].(func())
	return ret0
}

func (_mr *_MockCollectorRecorder) TimeContainerBuild(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TimeContainerBuild", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockCollector) TimeContainerBuildAll(_param0 string, _param1 string, _param2 string, _param3 *error) func() {
	ret := _m.ctrl.Call(_m, "TimeContainerBuildAll", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(func())
	return ret0
}

func (_mr *_MockCollectorRecorder) TimeContainerBuildAll(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TimeContainerBuildAll", arg0, arg1, arg2, arg3)
}

func (_m *MockCollector) TimeProvisioning(_param0 string, _param1 string, _param2 string, _param3 *error) func() {
	ret := _m.ctrl.Call(_m, "TimeProvisioning", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(func())
	return ret0
}

func (_mr *_MockCollectorRecorder) TimeProvisioning(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TimeProvisioning", arg0, arg1, arg2, arg3)
}
